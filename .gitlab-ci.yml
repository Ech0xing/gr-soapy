stages:
  - build
  - deploy
debian:
  image: debian:buster
  before_script:
    - apt-get update -qq
    - |
      apt-get install -y -qq \
          libboost-dev \
          libboost-filesystem-dev \
          libboost-system-dev \
          libcppunit-dev \
          swig \
          cmake \
          gcc \
          gnuradio-dev \
          libsoapysdr-dev \
          libconfig++-dev \
          git
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake ..
    - make
    - cd ..
suse:
  image: opensuse/tumbleweed
  before_script:
    - |
      zypper in -y \
          boost-devel \
          libboost_filesystem-devel \
          libboost_system-devel \
          cppunit-devel \
          python \
          python-devel \
          swig \
          cmake \
          gcc-c++ \
          gcc \
          soapy-sdr \
          soapy-sdr-devel \
          gnuradio \
          gnuradio-devel
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DLIB_SUFFIX=64 -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
    - make
    - cd ..
ubuntu:
  image: ubuntu:18.04
  variables:
    DEBIAN_FRONTEND: noninteractive
  before_script:
    - apt-get update -qq -y
    - |
      apt-get install -q -y \
          libboost-dev \
          libboost-filesystem-dev \
          libboost-system-dev \
          libcppunit-dev \
          swig \
          cmake \
          gcc \
          gnuradio-dev \
          libsoapysdr-dev \
          libconfig++-dev \
          git
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake  ..
    - make
docs:
  image: ubuntu:18.04
  variables:
    DEBIAN_FRONTEND: noninteractive
  before_script:
    - apt-get update -qq -y
    - |
      apt-get install -q -y \
          libboost-dev \
          libboost-filesystem-dev \
          libboost-system-dev \
          doxygen \
          libcppunit-dev \
          swig \
          cmake \
          gcc \
          gnuradio-dev \
          libsoapysdr-dev \
          libconfig++-dev \
          git
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake  ..
    - make doxygen_target
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - build/docs/doxygen/html
  only:
    - master
pages:
  stage: deploy
  image: alpine
  script:
    - mv build/docs/doxygen/html/ public/
  artifacts:
    paths:
      - public
  only:
    - master
