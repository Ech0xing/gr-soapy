---

id: soapy_source
label: Soapy Source
category: '[soapy]'
flags: [python, throttle]

parameters:
  - id: type
    label: Output Type
    dtype: enum
    options: [fc32, sc16, sc8]
    option_labels: [Complex Float32, Complex Int16, Complex Byte]
    option_attributes:
      type: [fc32, sc16, sc8]
    hide: part

  - id: devname
    label: Device Type
    dtype: enum
    default: 'rtlsdr'
    options: ['airspy', 'bladerf', 'hackrf', 'lime', 'plutosdr', 'rtlsdr', 'sidekiq', 'sdrplay', 'uhd', 'xtrxsoapy', 'custom']
    option_labels: ['airspy', 'bladerf', 'hackrf', 'lime', 'plutosdr', 'rtlsdr', 'sidekiq', 'sdrplay', 'uhd', 'xtrxsoapy', 'custom']

  - id: dev
    label: Device String
    dtype: string
    default: 'driver=rtlsdr'
    hide: ${ 'none' if (devname == 'custom') else 'all' }

  - id: args
    label: Arguements
    dtype: string

  - id: samp_rate
    label: Sampling Rate
    dtype: float
    default: 'samp_rate'

  - id: nchan
    label: Num Channels
    dtype: int
    default: '1'
    hide: part

  - id: clock_rate
    label: Master Clock Rate
    dtype: real
    default: '0'
    hide: part

  - id: clock_source
    label: Clock Source
    dtype: string
    hide: part

  - id: center_freq0
    label: 'Ch0: Center Freq (Hz)'
    category: RF Options
    dtype: real
    default: '100.0e6'

  - id: nco_freq0
    label: 'Ch0: NCO Freq (Hz)'
    category: RF Options
    dtype: real
    default: '0'
    hide: ${ 'all' if (devname in ['uhd', 'plutosdr', 'airspy','rtlsdr']) else 'part' }

  - id: manual_gain0
    label: 'Ch0: Enable Manual Gain'
    category: RF Options
    dtype: bool
    default: 'True'
    hide: part

  - id: overall_gain0
    label: 'Ch0: Overall Gain Value'
    category: RF Options
    dtype: real
    default: '10'
    hide: ${ 'none' if (not manual_gain0) else 'all' }

  - id: pga_gain0
    label: 'Ch0: PGA Gain Value'
    category: RF Options
    dtype: float
    default: '24'
    hide: ${ 'none' if ( (devname in ['uhd', 'plutosdr', 'xtrxsoapy', 'lime', 'custom']) and manual_gain0 ) else 'all' }

  - id: lna_gain0
    label: 'Ch0: LNA Gain Value'
    category: RF Options
    dtype: float
    default: '10'
    hide: ${ 'none' if ( (devname in ['airspy', 'bladerf', 'lime', 'hackrf', 'xtrxsoapy', 'custom']) and manual_gain0  ) else 'all' }

  - id: tia_gain0
    label: 'Ch0: TIA Gain Value'
    category: RF Options
    dtype: float
    default: '0'
    hide: ${ 'none' if ( (devname in ['xtrxsoapy', 'lime','custom']) and manual_gain0  ) else 'all' }

  - id: mix_gain0
    label: 'Ch0: MIX Gain Value'
    category: RF Options
    dtype: float
    default: '10'
    hide: ${ 'none' if ( (devname in ['airspy', 'custom']) and manual_gain0  ) else 'all' }

  - id: vga_gain0
    label: 'Ch0: VGA Gain Value'
    category: RF Options
    dtype: float
    default: '10'
    hide: ${ 'none' if ( (devname in ['airspy', 'hackrf', 'custom']) and manual_gain0  ) else 'all' }

  - id: tuner_gain0
    label: 'Ch0: TUNER Gain Value'
    category: RF Options
    dtype: float
    default: '10'
    hide: ${ 'none' if ( (devname in ['rtlsdr', 'custom']) and manual_gain0  ) else 'all' }

  - id: amp_gain0
    label: 'Ch0: AMP Gain Value'
    category: RF Options
    dtype: float
    default: '0'
    hide: ${ 'none' if ( (devname in ['hackrf', 'custom']) and manual_gain0  ) else 'all' }

  - id: ifgr_gain
    label: 'Ch0: IFGR Gain Value'
    category: RF Options
    dtype: float
    default: '59'
    hide: ${ 'none' if ( (devname in ['sdrplay', 'custom']) and manual_gain0  ) else 'all' }

  - id: rfgr_gain
    label: 'Ch0: RFGR Gain Value'
    category: RF Options
    dtype: float
    default: '9'
    hide: ${ 'none' if ( (devname in ['sdrplay', 'custom']) and manual_gain0  ) else 'all' }

  - id: rxvga1_gain
    label: 'Ch0: RXVGA1 Gain Value'
    category: RF Options
    dtype: float
    default: '5'
    hide: ${ 'none' if ( (devname in ['bladerf', 'custom']) and manual_gain0  ) else 'all' }

  - id: rxvga2_gain
    label: 'Ch0: RXVGA2 Gain Value'
    category: RF Options
    dtype: float
    default: '0'
    hide: ${ 'none' if ( (devname in ['bladerf', 'custom']) and manual_gain0  ) else 'all' }

  - id: ant0
    label: 'Ch0: Antenna'
    category: RF Options
    dtype: string
    default: 'RX'
    hide: ${ 'part' if nchan > 0 else 'all' }

  - id: bw0
    label: 'Ch0: Bandwidth (Hz)'
    category: RF Options
    dtype: real
    default: '0'
    hide: ${ 'part' if nchan > 0 else 'all' }

  - id: dc_offset_auto_mode0
    label: 'Ch0: Automatic DC Offset Mode'
    category: RF Options
    dtype: bool
    default: 'False'
    hide: ${ 'all' if ( devname in ['plutosdr', 'airspy', 'rtlsdr'] ) else 'part' }

  - id: gain_auto_mode0
    label: 'Ch0: Automatic Gain Control'
    category: RF Options
    dtype: bool
    default: 'False'
    hide: ${ 'none' if (devname in ['airspy', 'plutosdr', 'sdrplay', 'uhd']) else ('all' if devname in ['lime', 'rtlsdr'] else 'part')}

  - id: dc_offset0
    label: 'Ch0: DC Offset'
    category: RF Options
    dtype: complex
    default: '0'
    hide: ${ 'all' if ( (devname in ['uhd', 'lime', 'plutosdr', 'airspy', 'rtlsdr']) or dc_offset_auto_mode0 == 'True' ) else 'part' }

  - id: sdrplay_if_mode
    label: IF Mode
    category: RF Options
    dtype: enum
    default: 'Zero-IF'
    options: ['Zero-IF', '450kHz', '1620kHz', '2048kHz']
    option_labels: [Zero-IF, 450kHz, 1620kHz, 2048kHz]
    hide: ${ 'none' if ( devname == 'sdrplay' ) else 'all' }

  - id: sdrplay_biastee
    label: Bias Tee
    category: RF Options
    dtype: bool
    default: 'False'
    hide: ${ 'none' if ( devname == 'sdrplay') else 'all' }

  - id: sdrplay_agc_setpoint
    label: AGC Setpoint (dBfs)
    category: RF Options
    dtype: int
    default: '-30'
    hide: ${ 'none' if ( devname == 'sdrplay' ) else 'all' }

  - id: sdrplay_rfnotch
    label: RF Notch Filter
    category: RF Options
    dtype: bool
    default: 'False'
    hide: ${ 'none' if ( devname == 'sdrplay' ) else 'all' }

  - id: sdrplay_dabnotch
    label: DAB Notch Filter
    category: RF Options
    dtype: bool
    default: 'False'
    hide: ${ 'none' if ( devname == 'sdrplay' ) else 'all' }

  - id: correction0
    label: 'Ch0: Frequency Correction'
    category: RF Options
    dtype: real
    default: '0'
    hide: ${ 'all' if ( devname in ['uhd', 'lime', 'plutosdr', 'airspy', 'sdrplay'] ) else 'part' }

  - id: balance0
    label: 'Ch0: IQ Balance Correction'
    category: RF Options
    dtype: complex
    default: '0'
    hide: ${ 'all' if ( devname in ['uhd', 'lime', 'plutosdr', 'airspy', 'rtlsdr', 'sdrplay'] ) else 'part' }

  - id: center_freq1
    label: 'Ch1: Center Freq (Hz)'
    category: RF Options
    dtype: real
    default: '0'
    hide: ${ 'none' if nchan > 1 else 'all' }

  - id: nco_freq1
    label: 'Ch1: NCO Freq (Hz)'
    category: RF Options
    dtype: real
    default: '0'
    hide: 'all'

  - id: manual_gain1
    label: 'Ch1: Gain Mode'
    category: RF Options
    dtype: bool
    default: 'True'
    hide: ${ 'all' if nchan < 2 else 'part' }

  - id: overall_gain1
    label: 'Ch1: Gain Value'
    category: RF Options
    dtype: real
    default: '10'
    hide: ${ 'none' if (not manual_gain1) else 'all' }

  - id: pga_gain1
    label: 'Ch1: PGA Gain Value'
    category: RF Options
    dtype: float
    default: '24'
    hide: ${ 'none' if ( (devname in ['uhd', 'plutosdr', 'xtrxsoapy', 'lime', 'custom']) and manual_gain1   and nchan > 1) else 'all' }

  - id: lna_gain1
    label: 'Ch1: LNA Gain Value'
    category: RF Options
    dtype: float
    default: '10'
    hide: ${ 'none' if ( (devname in ['bladerf', 'lime', 'hackrf', 'xtrxsoapy', 'custom']) and manual_gain1   and nchan > 1) else 'all' }

  - id: tia_gain1
    label: 'Ch1: TIA Gain Value'
    category: RF Options
    dtype: float
    default: '0'
    hide: ${ 'none' if ( (devname in ['xtrxsoapy', 'lime','custom']) and manual_gain1 and nchan > 1) else 'all' }

  - id: ant1
    label: 'Ch1: Antenna'
    category: RF Options
    dtype: string
    default: 'RX2'
    hide: ${ 'part' if nchan > 1 else 'all' }

  - id: bw1
    label: 'Ch1: Bandwidth (Hz)'
    category: RF Options
    dtype: real
    default: '0'
    hide: ${ 'part' if nchan > 1 else 'all' }

  - id: dc_offset_auto_mode1
    label: 'Ch1: Automatic DC Offset Mode'
    category: RF Options
    dtype: bool
    default: 'False'
    hide: ${ 'all' if ( nchan < 2 or ( devname in ['plutosdr', 'airspy', 'rtlsdr', 'hackrf']) ) else 'part' }

  - id: gain_auto_mode1
    label: 'Ch1: Automatic Gain Control'
    category: RF Options
    dtype: bool
    default: 'False'
    hide: ${ 'none' if (devname == 'airspy' or devname=='plutosdr' or devname == 'sdrplay') and gain_auto_mode1 else ('all' if (devname == 'uhd' or devname == 'lime' or devname == 'rtlsdr' or nchan <= 1) else 'part')}

  - id: dc_offset1
    label: 'Ch1: DC Offset'
    category: RF Options
    dtype: complex
    default: '0'
    hide: ${ 'all' if (nchan <= 1 or (devname == 'uhd' or devname == 'lime' or devname == 'plutosdr' or devname == 'airspy' or devname == 'rtlsdr') or (dc_offset_auto_mode0 == True) ) else 'part' }

  - id: correction1
    label: 'Ch1: Frequency Correction'
    category: RF Options
    dtype: real
    default: '0'
    hide: ${ 'all' if (nchan <= 1 or (devname == 'uhd' or devname == 'lime' or devname == 'plutosdr' or devname == 'airspy' or devname == 'rtlsdr') ) else 'part' }

  - id: balance1
    label: 'Ch1: IQ Balance Correction'
    category: RF Options
    dtype: complex
    default: '0'
    hide: ${ 'all' if (nchan <= 1 or (devname == 'uhd' or devname == 'lime' or devname == 'plutosdr' or devname == 'airspy' or devname == 'rtlsdr') ) else 'part' }

inputs:
  - domain: message
    id: command
    optional: true

outputs:
  - domain: stream
    dtype: ${ type.type }
    multiplicity: ${ nchan }
asserts:
  - ${ nchan > 0 }

templates:
    imports: import soapy
    make: |
        None
        if "${devname}" == 'custom':
            dev = ${dev}
        else:
            dev = 'driver=' + "${devname}"
        if "${devname}" == 'sdrplay':
            f = 'if_mode=' + "${sdrplay_if_mode}" + ',' + 'agc_setpoint=' + str("${sdrplay_agc_setpoint}") + ',' + 'biasT_ctrl=' + "${sdrplay_biastee}".lower() + ',' + 'rfnotch_ctrl=' + "${sdrplay_rfnotch}".lower() + ',' + 'dabnotch_ctrl=' + "${sdrplay_dabnotch}".lower() + ',' + str(${args})
            f = f.replace('\"', '')
            f = f.replace("\\'", '')
            f = f.strip(',')
            self.${id} = soapy.source(${nchan}, dev, f, ${samp_rate}, "${type}")
        else:
            self.${id} = soapy.source(${nchan}, dev, ${args}, ${samp_rate}, "${type}")
            
            if ${clock_rate} != 0:
                self.${id}.set_master_clock_rate(${clock_rate})
                
            if len(${clock_source}) > 0:
                self.${id}.set_clock_source(${clock_source})
            
        # Set up dc offsets
        if "${devname}" != 'uhd':
            if (self.${id}.hasDCOffset(0)):     
                self.${id}.set_dc_offset(0,${dc_offset0},${dc_offset_auto_mode0} == 'True')
            
            if (self.${id}.hasDCOffset(1)):     
                self.${id}.set_dc_offset(1,${dc_offset1},${dc_offset_auto_mode1} == 'True')
            
        # Setup IQ Balance
        if "${devname}" != 'uhd':
            if (self.${id}.hasIQBalance(0)):
                self.${id}.set_iq_balance(0,${balance0})
            
            if (self.${id}.hasIQBalance(1)):
                self.${id}.set_iq_balance(1,${balance1})
            
        # Setup Frequency correction
        if (self.${id}.hasFrequencyCorrection(0)):
            self.${id}.set_frequency_correction(0,${correction0})
             
        if (self.${id}.hasFrequencyCorrection(1)):
            self.${id}.set_frequency_correction(1,${correction1})
            
        self.${id}.set_gain_mode(0,${gain_auto_mode0})
        self.${id}.set_gain_mode(1,${gain_auto_mode1})
         
        self.${id}.set_frequency(0, ${center_freq0})
        self.${id}.set_frequency(1, ${center_freq1})
         
        # Made antenna sanity check more generic
        antList = self.${id}.listAntennas(0)
        if len(antList) > 1:
            # If we have more than 1 possible antenna
            if len(${ant0}) == 0 or ${ant0} not in antList:
                print("ERROR: Please define ant0 to an allowed antenna name.")
                strAntList = str(antList).lstrip('(').rstrip(')').rstrip(',')
                print("Allowed antennas: " + strAntList)
                exit(0)
            self.${id}.set_antenna(0,${ant0})
         
        if ${nchan} > 1:
            antList = self.${id}.listAntennas(1)
            # If we have more than 1 possible antenna
            if len(antList) > 1:
                if len(${ant1}) == 0 or ${ant1} not in antList:
                    print("ERROR: Please define ant1 to an allowed antenna name.")
                    strAntList = str(antList).lstrip('(').rstrip(')').rstrip(',')
                    print("Allowed antennas: " + strAntList)
                    exit(0)
                self.${id}.set_antenna(1,${ant1})
            
        if "${manual_gain0}" == 'False':
            self.${id}.set_gain(0,${overall_gain0})
            self.${id}.set_gain(1,${overall_gain1})
        else:
            if "${devname}" == 'uhd' or "${devname}" == 'sidekiq' or "${devname}" == 'lime':
                self.${id}.set_gain(0,"PGA", ${pga_gain0})
                self.${id}.set_gain(1,"PGA", ${pga_gain1})
            elif "${devname}" == 'hackrf':
                self.${id}.set_gain(0,"LNA", ${lna_gain0})
                self.${id}.set_gain(0,"VGA", ${vga_gain0})
                # Only hackrf uses "AMP", so just ch0
                self.${id}.set_gain(0,"AMP", ${amp_gain0})
            elif "${devname}" == 'bladerf':
                self.${id}.set_gain(0,"lna", ${lna_gain0})
                self.${id}.set_gain(0,"rxvga1", ${rxvga1_gain})
                self.${id}.set_gain(0,"rxvga2", ${rxvga2_gain})
            else:
                self.${id}.set_gain(0,"LNA", ${lna_gain0})
                self.${id}.set_gain(1,"LNA", ${lna_gain1})
                self.${id}.set_gain(0,"TIA", ${tia_gain0})
                self.${id}.set_gain(1,"TIA", ${tia_gain1})
                self.${id}.set_gain(0,"MIX", ${mix_gain0})
                self.${id}.set_gain(0,"VGA", ${vga_gain0})
                self.${id}.set_gain(0,"rxvga1", ${rxvga1_gain})
                self.${id}.set_gain(0,"rxvga2", ${rxvga2_gain})
                # Only rtl-sdr uses TUNER, so just ch0
                self.${id}.set_gain(0,"TUNER", ${tuner_gain0})
                # Only sdrplay uses IFGR so just ch0 for each
                self.${id}.set_gain(0,"IFGR", ${ifgr_gain})
                self.${id}.set_gain(0,"RFGR", ${rfgr_gain})
    

    callbacks:
        # RF Frequency
        - set_frequency(0, ${center_freq0})
        - |
          % if context.get('nchan')() > 1:
          set_frequency(1, ${center_freq1})
          % endif
        
        # Baseband Frequency
        - set_frequency(0,"BB",${nco_freq0})
        - |
          % if context.get('nchan')() > 1:
          set_frequency(1,"BB",${nco_freq0})
          % endif
        
        # Antenna
        - set_antenna(0,${ant0})
        - |
          % if context.get('nchan')() > 1:
          set_antenna(1,${ant1})
          % endif
        
        # Bandwith filter
        - set_bandwidth(0,${bw0})
        - |
          % if context.get('nchan')() > 1:
          set_bandwidth(1,${bw1})
          % endif
        
        # Gain settings
        - |
          % if not context.get('manual_gain0')():
          self.${id}.set_gain(0, ${overall_gain0})
          % endif
        
        - |
          % if not context.get('manual_gain1')():
          self.${id}.set_gain(1, ${overall_gain1})
          % endif
        
        - set_gain(0,"PGA", ${pga_gain0})
        - set_gain(1,"PGA", ${pga_gain1})
        - set_gain(0,"LNA", ${lna_gain0})
        - set_gain(1,"LNA", ${lna_gain1})
        - set_gain(0,"TIA", ${tia_gain0})
        - set_gain(1,"TIA", ${tia_gain1})
        - set_gain(0,"MIX", ${mix_gain0})
        - set_gain(0,"VGA", ${vga_gain0})
        - set_gain(0,"rxvga1", ${rxvga1_gain})
        - set_gain(0,"rxvga2", ${rxvga2_gain})
        - set_gain(0,"TUNER", ${tuner_gain0})
        - set_gain(0,"AMP", ${amp_gain0})
        - set_gain(0,"IFGR", ${ifgr_gain})
        - set_gain(0,"RFGR", ${rfgr_gain})
        - set_frequency_correction(0,${correction0})
        - set_frequency_correction(1,${correction1})
        - set_iq_balance(0,${balance0})
        - set_iq_balance(1,${balance1})
        - set_dc_offset(0,${dc_offset0},${dc_offset_auto_mode0} == 'True')
        - set_dc_offset(1,${dc_offset1},${dc_offset_auto_mode1} == 'True')

documentation: |-
    Soapy Source Block:
    Device:
    The device argument is a comma delimited string used to create a device
    instance that uses the specified driver. Device driver should always be
    specified. 
    
    Usage examples:
      Device: driver=lime
      Device: driver=uhd,type=b200
      Device: driver=uhd,serial=12345678
      
    Args: 
    Comma delimited list of key-word dictionary arguments specific for each
    ndevice. Device driver handles internally invalid arguments.
    
    Usage examples:
      Device: driver=lime
      Args: skipCal=True
    
      Device: driver=airspy
      Args: biastee=True
    
    Sample Rate:
    The sample rate is the number of samples per second input by this block.
    If the requested rate is not possible the driver handles it internally
    
    Center frequency:
    The center frequency of the RF chain. If the device cannot tune to the
    specified frequency the driver decides internally how to handle it.
    
    Master Clock Rate:
    The rate of the master clock. Can be assigned zero for automatic tuning.
    
    Clock Source:
    Specifies a valid external clock source. Can be left empty.
    
    Input Type:
    This parameter controls the data type of the stream in GNU-Radio.
    
    Gain:
    Depending the device driver specified in the Device field various gain
    parameters can be configured. If a driver is not explicitly supported from
    the block an Overal Gain parameter can be configured.
      E.g 1:
        Gain Value: 10
      E.g 2:
        Device: driver=uhd
        PGA Gain: 10
    
    Antenna: 
    Specified antenna used in RF chain. Can be left empty for auto assignment,
    else it must correspond to an antenna name of the device used.
    
    Bandwidth:
    The digital filter bandwidth of the RF chain. 
    Can be left empty for auto assignment, else it must be a correct filter
    bandwidth of the device.

file_format: 1
