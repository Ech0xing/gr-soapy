<?xml version="1.0"?>
<block>
 <name>Soapy Sink</name>
 <key>soapy_sink</key>
 <category>[soapy]</category>
 <flags>throttle</flags>
 <import>import soapy</import>

 <make>\
  soapy.sink($nchan, $dev, $samp_rate, "$type")

  <!-- Set clock rate and clock source if available -->
  #if $clock_rate()
self.$(id).set_master_clock_rate($clock_rate)
  #end if
  #if $clock_source()
self.$(id).set_clock_source($clock_source)
  #end if

  #set $center_freq_array = [$center_freq0, $center_freq1]
  #set $nco_freq_array = [$nco_freq0, $nco_freq1]
  #set $overall_gain_array = [$overall_gain0, $overall_gain1] 
  #set $pga_gain_array = [$pga_gain0, $pga_gain1]
  #set $pad_gain_array = [$pad_gain0, $pad_gain1]
  #set $iamp_gain_array = [$iamp_gain0, $iamp_gain1]
  #set $gain_auto_array = [$gain_auto_mode0, $gain_auto_mode1]
  #set $antenna_array = [$ant0, $ant1]
  #set $bandwidth_array = [$bw0, $bw1]
  #set $dc_auto_array = [$dc_offset_auto_mode0, $dc_offset_auto_mode1]
  #set $dc_offset_array = [$dc_offset0, $dc_offset1]
  #set $iq_balance_array = [$balance0, $balance1,]
  #set $frequency_correction_array = [$correction0, $correction1]

  #for $i in range(0, $nchan())
self.$(id).set_frequency($i, $center_freq_array[$i])
self.$(id).set_gain($i, $overall_gain_array[$i])
  #if ($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=plutosdr'
self.$(id).set_gain($i, 'PGA', $pga_gain_array[$i])
  #end if
  #if $dev().split(',')[0] == 'driver=lime'
self.$(id).set_gain($i, 'PAD', $pad_gain_array[$i])
self.$(id).set_gain($i, 'IAMP', $iamp_gain_array[$i])
self.$(id).set_frequency($i, "BB", $nco_freq_array[$i])
  #end if
  #if ($dev().split(',')[0]) != 'driver=uhd' and ($dev().split(',')[0]) != 'driver=plutosdr' and $dev().split(',')[0] != 'driver=lime'
self.$(id).set_gain($i, $overall_gain_array[$i])
  #end if
self.$(id).set_gain_mode($i, $gain_auto_array[$i])
  #if $antenna_array[$i]() != ''
self.$(id).set_antenna($i, $antenna_array[$i])
  #end if
  #if $bandwidth_array[$i]()
self.$(id).set_bandwidth($i, $bandwidth_array[$i])
  #end if
  #if str($dc_auto_array[$i]) == 'False' and $dc_offset_array[$i]() != 0
self.$(id).set_dc_offset($i, $dc_offset_array[$i], $dc_auto_array[$i])
  #else if str($dc_auto_array[$i]) == 'True'
self.$(id).set_dc_offset_mode($i, $dc_auto_array[$i])
  #end if
  #if $iq_balance_array[$i]()
self.$(id).set_iq_balance($i, $iq_balance_array[$i])
  #end if
  #if $frequency_correction_array[$i]()
self.$(id).set_frequency_correction($i, $frequency_correction_array[$i])
  #end if
  #end for
 </make>

<callback>set_frequency(0, $center_freq0)</callback>
<!-- Overall gain Channel 0 callback -->
 <callback>
  #if (($dev().split(',')[0]) != 'driver=uhd' and ($dev().split(',')[0]) != 'driver=plutosdr' and $dev().split(',')[0] != 'driver=lime') or not $fine_tune0()
self.$(id).set_gain(0, $overall_gain0)
  #end if
</callback>
<!-- NCO frequency Channel 0 callback -->
<callback>
  #if ($dev().split(',')[0] == 'driver=lime')
self.$(id).set_frequency(0, "BB", $nco_freq0)
  #end if
</callback>
<!-- PGA gain Channel 0 callback -->
 <callback>
  #if (($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=plutosdr') and $fine_tune0()
self.$(id).set_gain(0,'PGA', $pga_gain0)
  #end if
</callback>
<!-- PAD gain Channel 0 callback -->
<callback>
  #if ($dev().split(',')[0] == 'driver=lime') and $fine_tune0()
self.$(id).set_gain(0, 'PAD', $pad_gain0)
  #end if
</callback>
<!-- IAMP gain Channel 0 callback -->
<callback>
  #if ($dev().split(',')[0] == 'driver=lime') and $fine_tune0()
self.$(id).set_gain(0, 'IAMP', $iamp_gain0)
  #end if
</callback>
<callback>set_antenna(0,$ant0)</callback>
<callback>set_bandwidth(0,$bw0)</callback>

<callback>set_frequency(1, $center_freq1)</callback>
<!-- Overall gain Channel 1 callback -->
<callback>
  #if (($dev().split(',')[0]) != 'driver=uhd' and ($dev().split(',')[0]) != 'driver=plutosdr' and $dev().split(',')[0] != 'driver=lime') or not $fine_tune1()
self.$(id).set_gain(1, $overall_gain1)
  #end if
</callback>
<!-- PGA gain Channel 1 callback -->
<callback>
  #if (($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=plutosdr') and $fine_tune1()
self.$(id).set_gain(1,'PGA', $pga_gain1)
  #end if
</callback>
<callback>set_antenna(1,$ant1)</callback>
<callback>set_bandwidth(1,$bw1)</callback>

 <param>
  <name>Device</name>
  <key>dev</key>
  <type>string</type>
 </param>

 <param>
  <name>Sampling Rate</name>
  <key>samp_rate</key>
  <type>float</type>
 </param>

 <param>
  <name>Num Channels</name>
  <key>nchan</key>
  <value>1</value>
  <type>int</type>
  <hide>part</hide>
 </param>

 <param>
  <name>Master Clock Rate</name>
  <key>clock_rate</key>
  <value>0</value>
  <type>real</type>
  <hide>part</hide>
 </param>

 <param>
  <name>Clock Source</name>
  <key>clock_source</key>
  <type>string</type>
  <hide>part</hide>
 </param>

	<param>
		<name>Input Type</name>
		<key>type</key>
		<type>enum</type>
		<option>
			<name>Complex float32</name>
			<key>fc32</key>
			<opt>type:fc32</opt>
		</option>
		<option>
			<name>int16</name>
			<key>s16</key>
			<opt>type:s16</opt>
		</option>
	</param>
 <!-- Channel 0 params -->

	<param>
  <name>Ch0: Center Freq (Hz)</name>
  <key>center_freq0</key>
  <value>0</value>
  <type>real</type>
  <hide>#if $nchan() > 0 then 'none' else 'all'#</hide>
  <tab>RF Options</tab>
 </param>

  <param>
    <name>Ch0: NCO Freq (Hz)</name>
    <key>nco_freq0</key>
    <value>0</value>
    <type>real</type>
    <hide>
      #if (($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=plutosdr' or ($dev().split(',')[0]) == 'driver=airspy' or ($dev().split(',')[0]) == 'driver=rtlsdr')
        all
      #else
        part
      #end if
    </hide>
    <tab>RF Options</tab>
  </param>

  <param>
    <name>Ch0: Gain Mode</name>
    <key>fine_tune0</key>
    <value>False</value>
    <type>bool</type>
    <hide>part</hide>
    <option>
      <name>Auto</name>
      <key>False</key>
    </option>
    <option>
      <name>Manual</name>
      <key>True</key>
    </option>
    <tab>RF Options</tab>
  </param>

 <!-- Overall Gain Channel 0 -->
 <param>
  <name>Ch0: Gain Value</name>
  <key>overall_gain0</key>
  <value>0</value>
  <type>real</type>
  <hide>
    #if $fine_tune0()
      all
    #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <!-- PGA Gain Channel 0 -->
 <param>
  <name>Ch0: PGA Gain Value</name>
  <key>pga_gain0</key>
  <value>0</value>
  <type>float</type>
  <hide>
   #if (($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=plutosdr') and $fine_tune0()
    none
   #else
    all
   #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <!-- PAD Gain Channel 0 -->
 <param>
  <name>Ch0: PAD Gain Value</name>
  <key>pad_gain0</key>
  <value>0</value>
  <type>float</type>
  <hide>
   #if ($dev().split(',')[0]) == 'driver=lime' and $fine_tune0()
    none
   #else
    all
   #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <!-- IAMP Gain Channel 0 -->
 <param>
  <name>Ch0: IAMP Gain Value</name>
  <key>iamp_gain0</key>
  <value>0</value>
  <type>float</type>
  <hide>
   #if ($dev().split(',')[0]) == 'driver=lime' and $fine_tune0()
    none
   #else
    all
   #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch0: Automatic Gain</name>
  <key>gain_auto_mode0</key>
  <value>False</value>
  <type>bool</type>
  <hide>
  #if ($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else
    part
  #end if
  </hide>
  <option>
    <name>False</name>
    <key>False</key>
  </option>
  <option>
    <name>True</name>
    <key>True</key>
  </option>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch0: Antenna</name>
  <key>ant0</key>
  <value></value>
  <type>string</type>
  <hide>#if $nchan() > 0 then 'part' else 'all'#</hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch0: Bandwidth (Hz)</name>
  <key>bw0</key>
  <value>0</value>
  <type>real</type>
  <hide>#if $nchan() > 0 then 'part' else 'all'#</hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch0: Automatic DC Offset Mode</name>
  <key>dc_offset_auto_mode0</key>
  <type>bool</type>
  <hide>
  #if ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else
    part
  #end if
  </hide>
  <option>
    <name>False</name>
    <key>False</key>
  </option>
  <option>
    <name>True</name>
    <key>True</key>
  </option>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch0: DC Offset</name>
  <key>dc_offset0</key>
  <value>0</value>
  <type>complex</type>
  <hide>
  #if ($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else if $dc_offset_auto_mode0() == True
    all
  #else
    part
  #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch0: Frequency Correction</name>
  <key>correction0</key>
  <value>0</value>
  <type>real</type>
  <hide>
  #if ($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else
    part
  #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch0: IQ Balance Correction</name>
  <key>balance0</key>
  <value>0</value>
  <type>complex</type>
  <hide>
  #if ($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else
    part
  #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <!-- Channel 1 params -->
 <param>
  <name>Ch1: Center Freq (Hz)</name>
  <key>center_freq1</key>
  <value>0</value>
  <type>real</type>
  <hide>#if $nchan() > 1 then 'none' else 'all'#</hide>
  <tab>RF Options</tab>
 </param>

  <param>
    <name>Ch1: NCO Freq (Hz)</name>
    <key>nco_freq1</key>
    <value>0</value>
    <type>real</type>
    <hide>
        all
    </hide>
    <tab>RF Options</tab>
  </param>

  <param>
    <name>Ch1: Gain Mode</name>
    <key>fine_tune1</key>
    <value>False</value>
    <type>bool</type>
    <hide>
      #if $nchan() &lt; 2
        all
      #else
        part
      #end if
    </hide>
    <option>
      <name>Auto</name>
      <key>False</key>
    </option>
    <option>
      <name>Manual</name>
      <key>True</key>
    </option>
    <tab>RF Options</tab>
  </param>

 <!-- Overall Gain Channel 1 -->
 <param>
  <name>Ch1: Gain Value</name>
  <key>overall_gain1</key>
  <value>0</value>
  <type>real</type>
  <hide>
  #if ((($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=plutosdr' or ($dev().split(',')[0]) == 'driver=lime') and $fine_tune1()) or $nchan() &lt; 2
    all
  #end if
  </hide>
 <tab>RF Options</tab>
 </param>

 <!-- PGA Gain Channel 1 -->
 <param>
  <name>Ch1: PGA Gain Value</name>
  <key>pga_gain1</key>
  <value>0</value>
  <type>float</type>
  <hide>
  #if (($dev().split(',')[0]) == 'driver=uhd') and $nchan() >1 and $fine_tune1()
    none
  #else
    all
  #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <!-- PAD Gain Channel 1 -->
 <param>
  <name>Ch1: PAD Gain Value</name>
  <key>pad_gain1</key>
  <value>0</value>
  <type>float</type>
  <hide>
  #if ($dev().split(',')[0]) == 'driver=lime' and $nchan() >1 and $fine_tune1()
    none
  #else
    all
  #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <!-- IAMP Gain Channel 1 -->
 <param>
  <name>Ch1: IAMP Gain Value</name>
  <key>iamp_gain1</key>
  <value>0</value>
  <type>float</type>
  <hide>
  #if ($dev().split(',')[0]) == 'driver=lime' and $nchan() >1 and $fine_tune1()
    none
  #else
    all
  #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch1: Automatic Gain</name>
  <key>gain_auto_mode1</key>
  <value>False</value>
  <type>bool</type>
  <hide>
  #if $nchan() &lt;= 1
    all
  #else if ($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else
    part
  #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch1: Antenna</name>
  <key>ant1</key>
  <value></value>
  <type>string</type>
  <hide>#if $nchan() > 1 then 'part' else 'all'#</hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch1: Bandwidth (Hz)</name>
  <key>bw1</key>
  <value>0</value>
  <type>real</type>
  <hide>#if $nchan() > 1 then 'part' else 'all'#</hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch1: Automatic DC Offset Mode</name>
  <key>dc_offset_auto_mode1</key>
  <value>False</value>
  <type>bool</type>
  <hide>
  #if $nchan() &lt;= 1
    all 
  #else if ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else
    part
  #end if 
  </hide>
  <option>
    <name>False</name>
    <key>False</key>
  </option>
  <option>
    <name>True</name>
    <key>True</key>
  </option>
  <tab>RF Options</tab>
 </param>
 
 <param>
  <name>Ch1: DC Offset</name>
  <key>dc_offset1</key>
  <value>0</value>
  <type>complex</type>
  <hide>
  #if $nchan() &lt;= 1
    all
  #else if ($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else if $dc_offset_auto_mode0() == True
    all
  #else
    part
  #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch1: Frequency Correction</name>
  <key>correction1</key>
  <value>0</value>
  <type>real</type>
  <hide>
  #if $nchan() &lt;= 1 
    all
  #else if ($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else
    part
  #end if 
  </hide>
  <tab>RF Options</tab>
 </param>

 <param>
  <name>Ch1: IQ Balance Correction</name>
  <key>balance1</key>
  <value>0</value>
  <type>complex</type>
  <hide>
  #if $nchan() &lt;= 1
    all  
  #else if ($dev().split(',')[0]) == 'driver=uhd' or ($dev().split(',')[0]) == 'driver=lime' or ($dev().split(',')[0]) == 'driver=plutosdr'
    all
  #else
    part
  #end if
  </hide>
  <tab>RF Options</tab>
 </param>

 <!-- Check number of channels -->
 <check>\
  #if ($dev().split(',')[0]) == 'driver=uhd'
  2 >= $nchan\
  #else if ($dev().split(',')[0]) == 'driver=plutosdr' or ($dev().split(',')[0]) == 'driver=lime'
  1 == $nchan\
  #else
  2 >= $nchan\
  #end if
 </check>

 <!-- Check PGA gain for Channel 0 -->
 <check>\
  #if ($dev().split(',')[0]) == 'driver=uhd'
  89.75 >= $pga_gain0 >= 0\
  #else if ($dev().split(',')[0]) == 'driver=plutosdr'
  89 >= $pga_gain0 >= -89\
  #else
  0 == 0\
  #end if
 </check>

 <!-- Check PAD gain for Channel 0 -->
 <check>\
  #if ($dev().split(',')[0]) == 'driver=lime'
  52 >= $pad_gain0 >= 0\
  #else
  0 == 0\
  #end if
 </check>

 <!-- Check IAMP gain for Channel 0 -->
 <check>\
  #if ($dev().split(',')[0]) == 'driver=lime'
  12 >= $iamp_gain0 >= -12\
  #else
  0 == 0\
  #end if
 </check>

 <!-- Check PGA gain for Channel 1 -->
 <check>\
  #if ($dev().split(',')[0]) == 'driver=uhd'
  89.75 >= $pga_gain1 >= 0\
  #else
  0 == 0\
  #end if
 </check>

 <!-- Check Positive number of Channels -->
 <check>\
  $nchan > 0\
 </check>

 <sink>
  <name>in</name>
    <type>$type.type</type>
  <nports> $nchan</nports>
 </sink>

 <sink>
  <name>command</name>
  <type>message</type>
  <optional>1</optional>
 </sink>

 <doc>
Soapy Sink Block:

Device:
The device argument is a comma delimited string used to create a device
instance that uses the specified driver. Device driver should always be
specified. 
Usage examples:
Device: driver=limesdr
Device: driver=uhd,type=b200
Device: driver=uhd,serial=12345678

Sample Rate:
The sample rate is the number of samples per second input by this block.
If the requested rate is not possible the driver decides internally how
to handle it.

Center frequency:
The center frequency of the RF chain. 
If the device cannot tune to the specified frequency the driver decides
internally how to handle it.

Master Clock Rate:
The rate of the master clock. 
Can be assigned zero for automatic tuning.

Clock Source:
Specifies a valid external clock source. 
Can be left empty.

Input Type:
This parameter controls the data type of the stream in gnuradio.

Gain:
Depending the device driver specified in the Device field various
gains parameters can be configured. If a driver is not explicitly
supported from the block an Overal Gain parameter can be configured.
E.g 1:
Gain Value: 10
E.g 2:
Device: driver=uhd
PGA Gain: 10

Antenna:
Specified antenna used in RF chain.
Can be left empty for auto assignment, else it must correspond to an
antenna name of the device used.

Bandwidth:
The digital filter bandwidth of the RF chain.
Can be left empty for auto assignment, else it must be a correct filter
bandwidth of the device.
 </doc>
 
</block>
